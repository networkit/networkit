Checks: >
    -*,
    bugprone-assert-side-effect,
    bugprone-copy-constructor-init,
    bugprone-dangling-handle,
    bugprone-dynamic-static-initializers,
    bugprone-exception-escape,
    bugprone-fold-init-type,
    bugprone-forward-declaration-namespace,
    bugprone-forwarding-reference-overload,
    bugprone-inaccurate-erase,
    bugprone-incorrect-roundings,
    bugprone-integer-division,
    bugprone-misplaced-widening-cast,
    bugprone-move-forwarding-reference,
    bugprone-multiple-statement-macro,
    bugprone-parent-virtual-call,
    bugprone-swapped-arguments,
    bugprone-unused-return-value,
    bugprone-use-after-move,
    bugprone-virtual-near-miss,
    clang-analyzer-core.*,
    clang-analyzer-cplusplus.*,
    clang-analyzer-deadcode.*,
    clang-analyzer-nullability.*,
    cppcoreguidelines-narrowing-conversions,
    modernize-deprecated-headers,
    modernize-make-shared,
    modernize-make-unique,
    modernize-use-emplace,
    modernize-use-override,
    modernize-use-using,
    performance-for-range-copy,
    performance-implicit-conversion-in-loop,
    performance-inefficient-algorithm,
    performance-inefficient-vector-operation,
    performance-move-const-arg,
    performance-noexcept-move-constructor,
    performance-trivially-destructible,
    performance-type-promotion-in-math-fn,
    performance-unnecessary-copy-initialization,
    performance-unnecessary-value-param,
    readability-avoid-const-params-in-decls,
    readability-const-return-type,
    readability-container-size-empty,
    readability-identifier-naming

# Turn the warnings from the checks above into errors.
# To turn all warnings into errors, simply write '*'
# in the first line after WarningsAsErrors
WarningsAsErrors:  >
    *,-cppcoreguidelines-narrowing-conversions

# Clang Tidy >= 12.0.0 is required to use regexp-options.
# ToDo: Enable each check one by one
FormatStyle: 'file'
HeaderFilterRegex: '.*\/(include\/networkit|networkit\/cpp)\/.*\.hpp$'
CheckOptions:
  - key:   readability-identifier-naming.ClassCase
    value: CamelCase
#  - key:   readability-identifier-naming.ConstexprVariableCase
#    value: UPPER_CASE
#  - key:   readability-identifier-naming.EnumCase
#    value: CamelCase
# Disabled due to backwards compatibility. New enum constant should 
# comply to the naming rules though.
#  - key:   readability-identifier-naming.EnumConstantCase
#    value: UPPER_CASE
#  - key:   readability-identifier-naming.FunctionCase
#    value: camelBack
# Leading underscore is used for Cython workaround functions.
# Example (from SSSP.hpp): 
#   normal fct.     -> bigfloat numberOfPaths(node t)  
#   workaround fct. -> double _numberOfPaths(node t)
#  - key:   readability-identifier-naming.FunctionIgnoredRegexp
#    value: "^.*_$"
#  - key:   readability-identifier-naming.MemberCase
#    value: camelBack
# Parameters and member variables for certain NetworKit 
# datastructures (e.g. graph, ...) or mathematical symbols 
# (e.g. radius, ...) allowed to be written in capitals.
# Example: G, Gnew, G1, R, ...
#  - key:   readability-identifier-naming.MemberIgnoredRegexp
#    value: "^[A-Z][a-z0-9]*$"
#  - key:   readability-identifier-naming.ParameterCase
#    value: camelBack
# See above for explanation.
#  - key:   readability-identifier-naming.ParameterIgnoredRegexp
#    value: "^[A-Z][a-z0-9]*$"
#  - key:   readability-identifier-naming.UnionCase
#    value: CamelCase
#  - key:   readability-identifier-naming.VariableCase
#    value: camelBack
# See above for explanation.
#  - key:   readability-identifier-naming.VariableIgnoredRegexp
#    value: "^[A-Z][a-z0-9]*$"
#  - key:   readability-identifier-naming.TemplateParameterCase
#    value: CamelCase
#  - key:   performance-unnecessary-value-param.AllowedTypes
#    value: '[Ff]unction$'
